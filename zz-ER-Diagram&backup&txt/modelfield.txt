from django.db import models
from django.utils.text import slugify
from django.urls import reverse

from category.models import category

class Tax(models.Model):
    name = models.CharField(max_length=255)
    rate = models.DecimalField(max_digits=5, decimal_places=2)  # Tax rate in percentage

    def __str__(self):
        return f'{self.name} {self.rate}'
    
class Brand(models.Model):
    name = models.CharField(max_length=255)
    
    def __str__(self):
        return self.name

class Tag(models.Model):
    name = models.CharField(max_length=255)
    
    def __str__(self):
        return self.name

class Product(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    price = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    tax = models.ForeignKey(Tax, on_delete=models.SET_NULL, null=True, blank=True)
    category = models.ForeignKey(category, on_delete=models.SET_NULL, null=True, related_name='products')
    tags = models.ManyToManyField(Tag, related_name='products', blank=True)
    brand = models.ForeignKey(Brand, on_delete=models.SET_NULL, null=True)
    available = models.BooleanField(default=True)
    tags = models.ManyToManyField(Tag, related_name='products', blank=True)
    brand = models.ForeignKey(Brand, on_delete=models.SET_NULL, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    slug = models.SlugField(unique=True, blank=True)
    meta_title = models.CharField(max_length=255, blank=True, null=True)
    meta_description = models.TextField(blank=True, null=True)
    
    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)
    
    def get_absolute_url(self):
        return reverse('product_detail', kwargs={'slug': self.slug})
    
    def price_with_tax(self):
        if self.tax:
            return (self.price * self.tax)/(self.tax.rate + 100) # (923 * 5)/(100 + 5)
        return self.price
    
    def __str__(self):
        return self.name

class ProductImage(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='images')
    image = models.ImageField(upload_to='products/%Y/%m/%d/')
    alt_text = models.CharField(max_length=255, blank=True, null=True)

    def __str__(self):
        return f"Image for {self.product.name}"

class ProductVariant(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='variants')
    name = models.CharField(max_length=255)
    price = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    stock = models.PositiveIntegerField(default=0)

    def __str__(self):
        return f"{self.name} of {self.product.name}"

class Stock():
    product = models.ForeignKey(Product,on_delete=models.CASCADE)
    product_stock = models.IntegerField(default=1)

# https://dummyjson.com/docs/products, dummy ecommerce api response
# class product_class()

# GST Amount= 
# 100+GST Rate
# Inclusive Price×GST Rate


# Base Price (Exclusive of GST)
# =
# Inclusive Price
# −
# GST Amount
# Base Price (Exclusive of GST)=Inclusive Price−GST Amount

# For Exclusive GST
# If the price is exclusive of GST:

# GST Amount
# =
# Exclusive Price
# ×
# GST Rate
# 100
# GST Amount=Exclusive Price× 
# 100
# GST Rate
# ​
 

# Total Price (Inclusive of GST)
# =
# Exclusive Price
# +
# GST Amount
# Total Price (Inclusive of GST)=Exclusive Price+GST Amount